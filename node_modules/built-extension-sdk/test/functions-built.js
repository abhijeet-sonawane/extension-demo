var Built          = require('../index')
var chai           = require('chai');
var assert         = chai.assert;
var should         = chai.should();
var expect         = chai.expect;
var chaiAsPromised = require("chai-as-promised");
var config         = require("../config")

describe("For Built function calls", function() {
  describe('Success cases for Set config of App', function() {
    it("should set app config to given values", function(done){
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      expect(app.getApiKey()).to.equal('dummy_api_key');
      expect(app.getMasterKey()).to.equal('dummy_master_key');
      expect(app.getHost()).to.equal('host1');
      expect(app.getPort()).to.equal('port1');
      expect(app.getProtocol()).to.equal('protocol1');
      done()
    })
    it("should throw error when application_api_key is undefined", function(done) {
      expect(function() { Built.App() }).to.throw(Error, "Missing application_api_key")
      done()
    })

    it("should throw error when options object is provided with no application_api_key", function(done) {
      expect(function() { Built.App({
        "host" : "dummmy_host"
        })
      }).to.throw(Error, "Missing application_api_key")
      done()
    })
    it("should get apikey", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        extension_key      : 'local1'
      })
      expect(app.getApiKey()).to.equal('dummy_api_key');
      done()
    })
    it("should get master key", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      expect(app.getMasterKey()).to.equal('dummy_master_key');
      done()
    })
    it("should get host", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      expect(app.getHost()).to.equal('host1');
      done()
    })
    it("should return instance of app on setting apikey and get apikey", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      app.setApiKey("updated_api_key")
      expect(app.getApiKey()).to.equal('updated_api_key');
      done()
    })
    it("should return instance of app on setting masterkey and get masterkey", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      app.setMasterKey("updated_master_key")
      expect(app.getMasterKey()).to.equal('updated_master_key');
      done()
    })
    it("should return instance of app on setting host  and get host", function(done) {
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      app.setHost("updated_host")
      expect(app.getHost()).to.equal('updated_host');
      done()
    })
  })
  describe('Error cases for Set config of App', function() {
    it("should throw Error if apikey is 'number' type", function(done) {
      var app = Built.App({
        application_api_key : "dummy_api_key"
      })
      expect(function(){ expect(app.setApiKey(1234)) }).to.throw(Error, /application_api_key should be of type string/);
      done()
    })
    
    it("should throw Error if apiKey is blank", function(done) {
      expect(function(){ expect(Built.App({
        application_api_key : ""
      })) }).to.throw(Error, "Missing application_api_key");
      done()
    })

    it("should throw Error if apiKey is blank when setApiKey method is called", function(done) {
      var app = Built.App({
        application_api_key : "sdfsf"
      })
      expect(function(){ expect(app.setApiKey("")) }).to.throw(Error, "Missing application_api_key");
      done()
    })
    it("should throw Error if master key is 'number' type", function(done) {
      var app = Built.App({
        application_api_key : "dummy_api_key"
      })
      expect(function(){ expect(app.setMasterKey(1234)) }).to.throw(Error, /master_key should be of type string/);
      done()
    })
    it("should throw Error if extension key is 'number' type", function(done) {
      var app = Built.App({
        application_api_key : "dummy_api_key"
      })
      expect(function(){ expect(app.setHost(1234)) }).to.throw(Error, /host should be of type string/);
      done()
    })
    it("should throw Error if extension key is 'number' type", function(done) {
      var app = Built.App({
        application_api_key : "dummy_api_key"
      })
      expect(function(){ expect(app.setProtocol(1234)) }).to.throw(Error, /protocol should be of type string/);
      done()
    })
    it("should throw Error if port is 'string' type", function(done) {
      var app = Built.App({
        application_api_key : "dummy_api_key"
      })
      expect(function(){ expect(app.setPort("1234")) }).to.throw(Error, /port should be of type number/);
      done()
    })
  })
  describe('Success cases for Set config of Extension', function(){
    it("returns config of app and extension on sending config Object as parameter to Extension", function(done){
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      var extensionSDK =  app.Extension({
        secret_key    : 'dummy_secret_key',
        extension_key : 'local1',
        static        : 'static',
        routes        : 'route'
      })
      expect(extensionSDK.getAppInstance().getConfig().application_api_key).to.equal('dummy_api_key');
      expect(extensionSDK.getAppInstance().getConfig().master_key).to.equal('dummy_master_key');
      expect(extensionSDK.getAppInstance().getConfig().host).to.equal('host1');
      expect(extensionSDK.getAppInstance().getConfig().port).to.equal('port1');
      expect(extensionSDK.getAppInstance().getConfig().protocol).to.equal('protocol1');
      expect(extensionSDK.getConfig().extension_key).to.equal('local1');
      expect(extensionSDK.getConfig().static).to.equal('static');
      expect(extensionSDK.getConfig().routes).to.equal('route');
      done()
    })
    it("returns config of app and extension on sending api_key string as parameter to Extension", function(done){
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      var extensionSDK =  app.Extension("local1")
      expect(extensionSDK.getAppInstance().getConfig().application_api_key).to.equal('dummy_api_key');
      expect(extensionSDK.getAppInstance().getConfig().master_key).to.equal('dummy_master_key');
      expect(extensionSDK.getAppInstance().getConfig().host).to.equal('host1');
      expect(extensionSDK.getAppInstance().getConfig().port).to.equal('port1');
      expect(extensionSDK.getAppInstance().getConfig().protocol).to.equal('protocol1');
      expect(extensionSDK.getConfig().extension_key).to.equal('local1');
      done()
    })
  })
  describe('Error cases for Set config of Extension', function(){
    it("returns config of app and extension on sending api_key string as parameter to Extension", function(done){
      var app = Built.App({
        application_api_key: 'dummy_api_key',
        master_key         : 'dummy_master_key',
        port               : 'port1',
        host               : 'host1',
        protocol           : 'protocol1'
      })
      expect(function(){ app.Extension(1234) }).to.throw(Error, /config should be of type object/);
      done()
    })
  })
})