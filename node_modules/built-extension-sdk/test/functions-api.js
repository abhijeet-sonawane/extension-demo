var ExtensionSDK = require('../index')
var config       = require('../config')
var sdkPackage   = require('../package')

describe("For function calls", function() {
  var currentUser = {
    type     : 'ApplicationUser',
    authtoken: 'dummyToken',
    uid      : 'anonymous',
    email    : 'testUser@raweng.com'
  }
  // Mocks hooks register call
  beforeEach(function(){
    httpMock('https://api.built.io')
    .put("/" + config.apiVersion + "/extensions/local1/hooks", {
      extension_sdk_version: sdkPackage.version,
      hooks                : []
    })
    .reply(201)
  })

  describe('Successfully Execution', function() {
    it("should receive current user information in built context", function(done) {
      var api
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return that.resSuccess(req, res, {})
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
        .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })

    it("checks app_user_object_uid in res body", function(done) {
      var api
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return that.resSuccess(req, res, {
              "first_name"         : "Test User",
              "app_user_object_uid": "blt2d70877882614b76"
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
        .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          event        : 'POST',
          current_user : currentUser,
          access_token : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoX3Rva2VuIjoiYmx0YmY4ZGU4ZWZiZmNiNWE1YzM4Njk1MTIyIiwicmVmcmVzaF90b2tlbiI6ImJsdGU2ZjcyZjBhZmM3MDhkYTQwZjZmODljOCIsInVzZXJfdWlkIjoiYmx0MmQ3MDg3Nzg4MjYxNGI3NiIsImV4dHJhX2RhdGEiOnt9LCJpYXQiOjE1MjMzNTM3Mzd9.B7Hsd5zfmD85Zq0G6ChVbOhh8RD5FXPPKciAHNMP-Mc"
        })
        .end(function(err, res) {
          expect(res.body.data.first_name).to.be.equal('Test User')
          expect(res.body.data.app_user_object_uid).to.be.equal('blt2d70877882614b76')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should receive request payload", function(done) {
      var api
      var data = {
        'name': 'abc'
      }
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.payload.data).to.be.deep.equal(data)
            return that.resSuccess(req, res, {})
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : data,
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should receive application_api_key in headers", function(done){
      var api
      var data = {
        'name': 'abc'
      }
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.headers['application_api_key']).to.be.equal('dummy_api_key')
            return that.resSuccess(req, res, {})
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : data,
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should receive the response send by extension function", function(done){
      var data = {
        'name': 'abc'
      }
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            this.resSuccess(req, res, {
              key: "value"
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : data,
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          expect(res.body).to.be.deep.equal({
            isExtensionResponse: true,
            data : {
              key: "value"
            }
          })
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })  
    })

    it("should set device id on application instance", function(done){
      var data = {
        'name': 'abc'
      }
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            req.builtApp.getHeaders().should.have.property("device_id", "dummy_device_id")
            var that = this
            this.resSuccess(req, res, {
              key: "value"
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : data,
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          device_id    : 'dummy_device_id',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          expect(res.body).to.be.deep.equal({
            isExtensionResponse: true,
            data : {
              key: "value"
            }
          })
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })  
    })
  })
  describe("Under Error conditions", function () {
    it("should receive the error response send by the extension function", function(done){
      var data = {
        'name': 'abc'
      }
      // Post hooks
      var testFunction = {
        '/functions/testFunction': {
          POST: function(req, res){
            var that = this
            this.resError(req, res, {
                name: "is mandatory field"
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(422)
        .send({
          data         : data,
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          expect(res.body).to.be.deep.equal({
            isExtensionError: true,
            errors : [{
              errorKey: "is mandatory field",
              path: "name"
            }]
          })
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })    
    })
  })
})